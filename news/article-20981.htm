<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://hiddify-next-node.github.io/news/article-20981.htm" />
    <title>springboot的依赖管理和自动配置</title>
        <meta name="description" content="依赖管理 根据springboot官方文档建立一个springboot项目 我们导入父工程 &lt;parent&gt;&lt;groupId&gt;org.springframework.boot&" />
        <!-- for-mobile-apps -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <link rel="icon" href="__ADDON__/img/hiddify_next_node/favicon.ico" type="image/x-icon"/>
    
    <script type="application/x-javascript">
    addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);

    function hideURLbar() { window.scrollTo(0, 1); }
    </script>
    <!-- //for-mobile-apps -->
    <link href="/assets/website/css/hiddify_next_node/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
    <link href="/assets/website/css/hiddify_next_node/style.css" rel="stylesheet" type="text/css" media="all" />
    <!-- js -->
    <script src="/assets/website/js/frontend/hiddify_next_node/jquery-1.11.1.min.js"></script>
    <!-- //js -->
    <script type="text/javascript" src="/assets/website/js/frontend/hiddify_next_node/jquery.iconmenu.js"></script>
    <script type="text/javascript">
    $(function() {
        $('#sti-menu').iconmenu();
    });
    </script>
    <!-- fonts -->
    <link href='https://fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,600italic,700italic,800italic,400,300,600,700,800' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Days+One' rel='stylesheet' type='text/css'>
    <!-- //fonts -->
    <!-- start-smoth-scrolling -->
    <script type="text/javascript" src="/assets/website/js/frontend/hiddify_next_node/move-top.js"></script>
    <script type="text/javascript" src="/assets/website/js/frontend/hiddify_next_node/easing.js"></script>
    <script type="text/javascript">
    jQuery(document).ready(function($) {
        $(".scroll").click(function(event) {
            event.preventDefault();
            $('html,body').animate({ scrollTop: $(this.hash).offset().top }, 1000);
        });
    });
    </script>
    <!-- start-smoth-scrolling -->
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-0CTNFKETTL"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-0CTNFKETTL');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!-- banner -->
    <div class="banner pagehead">
                <div class="header">
            <div class="container">
                <div class="header-nav">
                    <nav class="navbar navbar-default">
                        <!-- Brand and toggle get grouped for better mobile display -->
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                                                        <a class="navbar-brand" href="/"><i></i>Hiddify Next Node</a>
                                                    </div>
                        <!-- Collect the nav links, forms, and other content for toggling -->
                        <div class="collapse navbar-collapse nav-wil" id="bs-example-navbar-collapse-1">
                            <ul class="nav navbar-nav ">
                                                                <li>
                                    <a href="/">首页</a>
                                </li>
                                                                <li>
                                    <a href="/free-nodes/">免费节点</a>
                                </li>
                                                                <li>
                                    <a href="/paid-subscribe/">推荐机场</a>
                                </li>
                                                                <li>
                                    <a href="/news/">新闻资讯</a>
                                </li>
                                                                <li>
                                    <a href="#">关于</a>
                                </li>
                                <li>
                                    <a href="#">联系</a>
                                </li>
                            </ul>
                        </div><!-- /navbar-collapse -->
                        <!-- search-scripts -->
                        <script src="/assets/website/js/frontend/hiddify_next_node/classie.js"></script>
                        <script src="/assets/website/js/frontend/hiddify_next_node/uisearch.js"></script>
                        <script>
                        new UISearch(document.getElementById('sb-search'));
                        </script>
                        <!-- //search-scripts -->
                    </nav>
                </div>
            </div>
        </div>
    </div>
    <!-- about -->
    <div class="about">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                    <ol class="breadcrumb">
                        <li><a href="/">首页</a></li>
                        <li><a href="/news/">新闻资讯</a></li>
                        <li class="active">正文</li>
                    </ol>
                    <h1 class="tittle">springboot的依赖管理和自动配置</h1>
                                      				  				  				<div id="content_views" class="markdown_views prism-tomorrow-night"> <h2><a id="_0" rel="nofollow"></a>依赖管理</h2> <p>根据springboot官方文档建立一个springboot项目<br /> 我们导入父工程</p> <pre><code class="prism language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.5.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span></code></pre> <p>然后再导入对应的web场景的starter</p> <pre><code class="prism language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span></code></pre> <p>我们就可以使用web场景的一些常见的依赖。<br /> 我们进入当前项目的父工程里发现里面还继承了<strong>spring-boot-dependencies</strong>。里面定义了所有场景对应的依赖及其版本号。<br /> 我们如果在导入依赖的时候，若是springboot的父项目里已经定义了我们需要导入的依赖，我们可以不需要定义version，springboot会自动帮我们导入默认的版本号，这称为<strong>版本仲裁</strong>。<br /> 那么如果我们需要自定义版本号又该如何定义呢？<br /> 例如导入mysql.connector</p> <pre><code class="prism language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre> <p>springboot会自动仲裁版本为8.0.26<br /> 如需要自定义版本，则再自己的maven工程里加入</p> <pre><code class="prism language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">&gt;</span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span></code></pre> <p>这样就会将版本改为5.1.47。<br /> 首先，我们需要查看spring-boot-dependencies里规定的依赖版本，找到其用的key，在当前项目里重写配置就行。在maven里遵循就近优先原则。<br /><strong>关于场景启动器</strong>，springboot的start命名规范spring-boot-starter-*， * 代表了各种对应的开发场景。<br /> springboot所有支持的场景<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters"  rel="nofollow">点击此处进行查看</a> 。<br /> 也有许多第三方会去做springboot的场景启动器 *-spring-boot-starter。<br /> 如果你需要的依赖不在springboot的场景启动器提供的依赖里，则需要手动添加依赖并声明version。</p> <h2><a id="_48" rel="nofollow"></a>自动配置</h2> <p>在我们导入场景启动器后，会有大量的依赖导入到工程里。例如，我们导入web场景的启动器。写一个简单的Controller，启动springboot项目</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">HelloController</span><span class="token punctuation">{<!-- --></span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token class-name">String</span><span class="token function">handle01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token string">"Hello SpringBoot"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>我们可以看见，可以的访问我们的请求路径。<br /><img decoding="async" src="http://img.555519.xyz/uploads/20221201/39bf92638d01bd056e36f0bd95f74ecb.jpg" alt="springboot的依赖管理和自动配置"></p> <p>就例如spring-boot-starter-web里有webmvc，在以往学习mvc时会需要有一堆的配置，例如dispatcherServlet，乱码的配置，文件上传，视图解析器等等。那么虽然依赖导入了，<strong>但是配置我们却还没有配置</strong>，应用程序也能正常工作。<br /> 我们可以在springboot的主程序入口查看对应的IOC容器。</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">MainApplication</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 1.返回IOC容器</span><span class="token class-name">ConfigurableApplicationContext</span> run<span class="token operator">=</span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MainApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2.查看容器里的组件</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names<span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token operator">:</span> names<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>在启动项目的时候，会罗列出IOC容器里的组件名称 （组件过多，就不一一罗列）<br /><img decoding="async" src="http://img.555519.xyz/uploads/20221201/96d1fe091da17cfd9e858cbc782d0891.jpg" alt="springboot的依赖管理和自动配置"><br /> 在学习Spring时，会有包扫描的配置，可是我们在springboot里并没有配置，让springboot去扫描哪些包下的组件，那又是如何进容器的？<br /> springboot会自动扫描主程序所在的包及其子包，都会被扫描进容器。<br /> 若是你的组件不按照springboot的默认规则来进行存放，但也想进行容器里有以下两种方式</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>scanBasePackages<span class="token operator">=</span><span class="token string">"com"</span><span class="token punctuation">)</span></code></pre> <p>或者</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages<span class="token operator">=</span><span class="token string">"com"</span><span class="token punctuation">)</span></code></pre> <p>在springboot项目里我们可以通过properties或者yaml文件来配置项目的一些属性，那么这些属性值又是如何生效的呢？<br /> 其实在配置文件里的值，他都是绑定到对应容器里的组件，就例如server.port</p> <pre><code class="prism language-java">server<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">8080</span></code></pre> <p>ctrl+左，我们进入可以发现它对应的绑定了ServerProperties这个类</p> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> port<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>port<span class="token operator">=</span> port<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>而这个类在springboot启动的时候会被扫描进容器里<br /><img decoding="async" src="http://img.555519.xyz/uploads/20221201/c010df8377c953dcd27fc82c03dd1b63.jpg" alt="springboot的依赖管理和自动配置"><br /> 这样我们的配置文件就会生效。<br /><strong>按需加载所有自动配置项</strong><br /> spring-boot-dependencies，里有非常多的依赖版本，我们不可能是全部导入到项目中来，按需加载就是按照你导入的场景，会自动导入对应场景的依赖，例如你导入web场景，他就不会给你导入数据场景的依赖。<br /> 关于自动配置，Springboot的自动配置都在spring-boot-autoConfigure里，你导入哪些场景，对应的配置就会生效。<br /><img decoding="async" src="http://img.555519.xyz/uploads/20221201/07f7a5e3662081e10660bc85dc94fde6.jpg" alt="springboot的依赖管理和自动配置"><br /> 例如我们进入batch下查看对应的类，会发现，它有许多类是爆红的<br /><img decoding="async" src="http://img.555519.xyz/uploads/20221201/a98a62af068bf31a5f1dd929df47c1e4.jpg" alt="springboot的依赖管理和自动配置"><br /> 这是因为我们没有导入对应的batch的starter，我们尝试去导入对应的batch的starter</p> <pre><code class="prism language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-batch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre> <p>再来查看刚刚的类<br /><img decoding="async" src="http://img.555519.xyz/uploads/20221201/8255f192b256966f83b3b34a369d9208.jpg" alt="springboot的依赖管理和自动配置"><br /> 对应的类就不再爆红。<br /> 关于自动配置，Springboot的自动配置都在spring-boot-autoConfigure里，你导入哪些场景，对应的配置就会生效。</p> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-20524.htm">开个小型宠物食品加工厂需要什么手续和证件呢 开个宠物食品加工厂要多少钱</a></p>
                                        <p>下一个：<a href="/news/article-20982.htm">动物疫苗龙头股票排名 动物疫苗龙头股票排名前十</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-4-30-free-shadowrocket-node.htm" title="「4月30日」最高速度22.5M/S，2024年V2ray/Clash/Shadowrocket/SSR每天更新免费节点订阅链接">「4月30日」最高速度22.5M/S，2024年V2ray/Clash/Shadowrocket/SSR每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-7-31-clash-node-daily-updates.htm" title="「7月31日」最高速度20.9M/S，2024年V2ray/Clash/Shadowrocket/SSR/HiddifyNext每天更新免费节点订阅链接">「7月31日」最高速度20.9M/S，2024年V2ray/Clash/Shadowrocket/SSR/HiddifyNext每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-7-15-clash-node-daily-updates.htm" title="「7月15日」最高速度21.3M/S，2024年V2ray/SSR/Shadowrocket/Clash/HiddifyNext每天更新免费节点订阅链接">「7月15日」最高速度21.3M/S，2024年V2ray/SSR/Shadowrocket/Clash/HiddifyNext每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-6-9-free-high-speed-nodes.htm" title="「6月9日」最高速度22.6M/S，2024年Clash/V2ray/SSR/Shadowrocket/HiddifyNext每天更新免费节点订阅链接">「6月9日」最高速度22.6M/S，2024年Clash/V2ray/SSR/Shadowrocket/HiddifyNext每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-5-free-ssr-node.htm" title="「11月5日」最高速度22.5M/S，2024年SSR/V2ray/Clash/Shadowrocket/HiddifyNext每天更新免费节点订阅链接">「11月5日」最高速度22.5M/S，2024年SSR/V2ray/Clash/Shadowrocket/HiddifyNext每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-5-clash-v2ray-ss-ssr.htm" title="「8月5日」最高速度21.3M/S，2024年Shadowrocket/SSR/V2ray/Clash/HiddifyNext每天更新免费节点订阅链接">「8月5日」最高速度21.3M/S，2024年Shadowrocket/SSR/V2ray/Clash/HiddifyNext每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-18620.htm" title="女生技校最吃香的专业（女生技校最吃香的专业有哪些）">女生技校最吃香的专业（女生技校最吃香的专业有哪些）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-13-free-node-subscribe.htm" title="「8月13日」最高速度20.6M/S，2024年SSR/Clash/Shadowrocket/V2ray/HiddifyNext每天更新免费节点订阅链接">「8月13日」最高速度20.6M/S，2024年SSR/Clash/Shadowrocket/V2ray/HiddifyNext每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-4-28-clash-node-daily-updates.htm" title="「4月28日」最高速度21.6M/S，2024年V2ray/Clash/Shadowrocket/SSR每天更新免费节点订阅链接">「4月28日」最高速度21.6M/S，2024年V2ray/Clash/Shadowrocket/SSR每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-17-free-high-speed-nodes.htm" title="「10月17日」最高速度19.2M/S，2024年SSR/V2ray/Clash/Shadowrocket/HiddifyNext每天更新免费节点订阅链接">「10月17日」最高速度19.2M/S，2024年SSR/V2ray/Clash/Shadowrocket/HiddifyNext每天更新免费节点订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">18</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">27</span> <a href="/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">29</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">19</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
    <!-- //about -->
        <!-- footer-top -->
    <div class="footer-top">
        <div class="container">
            <p>
                HiddifyNextNode官网节点站 版权所有
                <br />
                Powered by WordPress
            </p>
        </div>
    </div>
    <!-- //footer-top -->
    <!-- for bootstrap working -->
    <script src="/assets/website/js/frontend/hiddify_next_node/bootstrap.js"></script>
    <!-- //for bootstrap working -->
    <!-- smooth scrolling -->
    <script type="text/javascript">
    $(document).ready(function() {
        /*
        	var defaults = {
        	containerID: 'toTop', // fading element id
        	containerHoverID: 'toTopHover', // fading element hover id
        	scrollSpeed: 1200,
        	easingType: 'linear' 
        	};
        */
        $().UItoTop({ easingType: 'easeOutQuart' });
    });
    </script>
    <a href="#" id="toTop" style="display: block;"> <span id="toTopHover" style="opacity: 1;"> </span></a>
    <!-- //smooth scrolling -->
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>