<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://hiddify-next-node.github.io/news/article-26991.htm" />
    <title>设计模式学习笔记原型模式以及深浅拷贝的区别</title>
        <meta name="description" content="原型模式也是创建对象的一种方式，它一般用在这样的场景：系统中存在大量相同或相似对象的创建问题，如果用传统的构造函数来创建对象，会比较复杂而且耗费资源。这个时候使用原型模式的克隆方式，能够节省不少时间。" />
        <!-- for-mobile-apps -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <link rel="icon" href="/assets/website/img/hiddify_next_node/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="HiddifyNextNode官网节点站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://hiddify-next-node.github.io/news/article-26991.htm" />
    <meta property="og:site_name" content="HiddifyNextNode官网节点站" />
    <meta property="og:title" content="设计模式学习笔记原型模式以及深浅拷贝的区别" />
    <meta property="og:image" content="https://hiddify-next-node.github.io/uploads/20240413/655cd581496a37d53f6142352f95b95b.webp" />
        <meta property="og:release_date" content="2024-12-17T10:13:58" />
    <meta property="og:updated_time" content="2024-12-17T10:13:58" />
        <meta property="og:description" content="原型模式也是创建对象的一种方式，它一般用在这样的场景：系统中存在大量相同或相似对象的创建问题，如果用传统的构造函数来创建对象，会比较复杂而且耗费资源。这个时候使用原型模式的克隆方式，能够节省不少时间。" />
            
    <script type="application/x-javascript">
    addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);

    function hideURLbar() { window.scrollTo(0, 1); }
    </script>

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="设计模式学习笔记原型模式以及深浅拷贝的区别">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- //for-mobile-apps -->
    <link href="/assets/website/css/hiddify_next_node/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
    <link href="/assets/website/css/hiddify_next_node/style.css" rel="stylesheet" type="text/css" media="all" />
    <!-- js -->
    <script src="/assets/website/js/frontend/hiddify_next_node/jquery-1.11.1.min.js"></script>
    <!-- //js -->
    <script type="text/javascript" src="/assets/website/js/frontend/hiddify_next_node/jquery.iconmenu.js"></script>
    <script type="text/javascript">
    $(function() {
        $('#sti-menu').iconmenu();
    });
    </script>
    <!-- fonts -->
    <link href='https://fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,600italic,700italic,800italic,400,300,600,700,800' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Days+One' rel='stylesheet' type='text/css'>
    <!-- //fonts -->
    <!-- start-smoth-scrolling -->
    <script type="text/javascript" src="/assets/website/js/frontend/hiddify_next_node/move-top.js"></script>
    <script type="text/javascript" src="/assets/website/js/frontend/hiddify_next_node/easing.js"></script>
    <script type="text/javascript">
    jQuery(document).ready(function($) {
        $(".scroll").click(function(event) {
            event.preventDefault();
            $('html,body').animate({ scrollTop: $(this.hash).offset().top }, 1000);
        });
    });
    </script>
    <!-- start-smoth-scrolling -->
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-0CTNFKETTL"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-0CTNFKETTL');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!-- banner -->
    <div class="banner pagehead">
                <div class="header">
            <div class="container">
                <div class="header-nav">
                    <nav class="navbar navbar-default">
                        <!-- Brand and toggle get grouped for better mobile display -->
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                            <a class="navbar-brand" href="/">
                                                        <i></i><span>Hiddify Next Node</span>
                                                        </a>
                        </div>
                        <!-- Collect the nav links, forms, and other content for toggling -->
                        <div class="collapse navbar-collapse nav-wil" id="bs-example-navbar-collapse-1">
                            <ul class="nav navbar-nav ">
                                                                <li>
                                    <a href="/">首页</a>
                                </li>
                                                                <li>
                                    <a href="/free-nodes/">免费节点</a>
                                </li>
                                                                <li>
                                    <a href="/paid-subscribe/">推荐机场</a>
                                </li>
                                                                <li>
                                    <a href="/client.htm">客户端</a>
                                </li>
                                                                <li>
                                    <a href="/news/">新闻资讯</a>
                                </li>
                                                            </ul>
                        </div><!-- /navbar-collapse -->
                        <!-- search-scripts -->
                        <script src="/assets/website/js/frontend/hiddify_next_node/classie.js"></script>
                        <script src="/assets/website/js/frontend/hiddify_next_node/uisearch.js"></script>
                        <script>
                        new UISearch(document.getElementById('sb-search'));
                        </script>
                        <!-- //search-scripts -->
                    </nav>
                </div>
            </div>
        </div>
    </div>
    <!-- about -->
    <div class="about">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                    <ol class="breadcrumb">
                        <li><a href="/">首页</a></li>
                        <li><a href="/news/">新闻资讯</a></li>
                        <li class="active">正文</li>
                    </ol>
                    <h1 class="tittle">设计模式学习笔记原型模式以及深浅拷贝的区别</h1>
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<p>原型模式也是创建对象的一种方式，它一般用在这样的场景：系统中存在大量相同或相似对象的创建问题，如果用传统的构造函数来创建对象，会比较复杂而且耗费资源。这个时候使用原型模式的克隆方式，能够节省不少时间。比如Java 类中提供的<code>Object clone()</code>就是原型模式的应用。</p> <h2 id="一原型模式介绍">一、原型模式介绍</h2> <p>原型设计模式（Prototype Design Pattern）指用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型相同或相似的新对象。在Java语言中就存在克隆的方式，比如浅拷贝和深拷贝。</p> <p>对于一般的对象创建，本身不会花费太多的资源，但是对于负责的对象，比如对象的数据需要经过复杂的计算才能得到（比如排序、计算哈希值），抑或是需要从 RPC、网络、数据库、文件系统等非常慢速的IO中读取，这个时候就可以利用原型模式从其他对象直接拷贝，从而减少资源的消耗。</p> <h2 id="二原型模式的实现">二、原型模式的实现</h2> <p>在Java中原型模式的实现方式就是深拷贝和浅拷贝，下面来谈谈深拷贝和浅拷贝的区别</p> <h3 id="21-深拷贝和浅拷贝">2.1 深拷贝和浅拷贝</h3> <h3 id="211-浅拷贝">2.1.1 浅拷贝</h3> <p>浅拷贝（Shadow Clone）是把原型对象中的成员变量为值类型的属性都复制给克隆对象，将为引用类的引用地址复制给克隆对象：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/392f072ccd43d921bedb38618912bd07.jpg" alt="设计模式学习笔记原型模式以及深浅拷贝的区别"></p> <p>实现代码如下：</p> <pre><code class="language-java">//实现Cloneable接口 public class ShadowCopy implements Cloneable{      private String name;      private int id;      public String getName() {         return name;     }      public void setName(String name) {         this.name = name;     }      public int getId() {         return id;     }      public void setId(int id) {         this.id = id;     }      public ShadowCopy(String name, int id) {         this.name = name;         this.id = id;     }      @Override     protected Object clone() throws CloneNotSupportedException {         return super.clone();     } } //调用测试 public class PrototypeTest {     public static void main(String[] args) throws CloneNotSupportedException {         ShadowCopy shadowCopy = new ShadowCopy("ethan", 01);         ShadowCopy copy = (ShadowCopy) shadowCopy.clone();         System.out.println("name:" + copy.getName() + " " + "id:" + copy.getId());         System.out.println(copy == shadowCopy);     } }</code></pre> <p>从最后的测试结果<code>copy == shadowCopy</code>显示为<code>false</code>，说明为浅拷贝。我们再看看深拷贝：</p> <h3 id="212-深拷贝">2.1.2 深拷贝</h3> <p>深拷贝（Deep Clone）是将原型对象中的所有对象，无论值类型还是引用类型，都复制一份给拷贝对象：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/6f152e3cb2a3111cc460d2b9ca11211b.jpg" alt="设计模式学习笔记原型模式以及深浅拷贝的区别"></p> <p>那么深拷贝该如何实现？而且前面我们发现，在拷贝时为何需要重写<code>Object</code>的<code>clone</code>方法？先来看看其源码，发现<code>clone</code>方法是一个本地方法：</p> <pre><code class="language-java">/**      * Creates and returns a copy of this object.  The precise meaning      * of "copy" may depend on the class of the object. The general      * intent is that, for any object {@code x}, the expression:      * &lt;blockquote&gt;      * &lt;pre&gt;      * x.clone() != x&lt;/pre&gt;&lt;/blockquote&gt;      * will be true, and that the expression:      * &lt;blockquote&gt;      * &lt;pre&gt;      * x.clone().getClass() == x.getClass()&lt;/pre&gt;&lt;/blockquote&gt;      * will be {@code true}, but these are not absolute requirements.      * While it is typically the case that:      * &lt;blockquote&gt;      * &lt;pre&gt;      * x.clone().equals(x)&lt;/pre&gt;&lt;/blockquote&gt;      * will be {@code true}, this is not an absolute requirement.      * &lt;p&gt;      * By convention, the returned object should be obtained by calling      * {@code super.clone}.  If a class and all of its superclasses (except      * {@code Object}) obey this convention, it will be the case that      * {@code x.clone().getClass() == x.getClass()}.      * &lt;p&gt;      * By convention, the object returned by this method should be independent      * of this object (which is being cloned).  To achieve this independence,      * it may be necessary to modify one or more fields of the object returned      * by {@code super.clone} before returning it.  Typically, this means      * copying any mutable objects that comprise the internal "deep structure"      * of the object being cloned and replacing the references to these      * objects with references to the copies.  If a class contains only      * primitive fields or references to immutable objects, then it is usually      * the case that no fields in the object returned by {@code super.clone}      * need to be modified.      * &lt;p&gt;      * The method {@code clone} for class {@code Object} performs a      * specific cloning operation. First, if the class of this object does      * not implement the interface {@code Cloneable}, then a      * {@code CloneNotSupportedException} is thrown. Note that all arrays      * are considered to implement the interface {@code Cloneable} and that      * the return type of the {@code clone} method of an array type {@code T[]}      * is {@code T[]} where T is any reference or primitive type.      * Otherwise, this method creates a new instance of the class of this      * object and initializes all its fields with exactly the contents of      * the corresponding fields of this object, as if by assignment; the      * contents of the fields are not themselves cloned. Thus, this method      * performs a "shallow copy" of this object, not a "deep copy" operation.      * &lt;p&gt;      * The class {@code Object} does not itself implement the interface      * {@code Cloneable}, so calling the {@code clone} method on an object      * whose class is {@code Object} will result in throwing an      * exception at run time.      *      * @return     a clone of this instance.      * @throws  CloneNotSupportedException  if the object's class does not      *               support the {@code Cloneable} interface. Subclasses      *               that override the {@code clone} method can also      *               throw this exception to indicate that an instance cannot      *               be cloned.      * @see java.lang.Cloneable      */ protected native Object clone() throws CloneNotSupportedException;</code></pre> <p>从注释可以知道，对于所有对象来说：</p> <ol> <li><code>x.clone()!=x</code>应当返回<code>true</code>，因为克隆对象不能和原对象是同一个对象</li> <li><code>x.clone().getClass()==x.getClass()</code>应当返回<code>true</code>，因为克隆对象和原对象的类型是相同的</li> <li><code>x.clone().equals(x)</code>应当返回<code>true</code>，因为使用<code>equals</code>方法比较时，其值都是相同的</li> </ol> <p>Java 实现拷贝主要有两个步骤：一是实现<code>Cloneable</code>空接口，二是重写<code>Object</code>的<code>Clone</code>方法后再调用父类的克隆方法<code>super.clone()</code>，那为何这样做？</p> <p>拷贝功能不是一个常用的功能，因此在对象需要时实现即可，这样比较合理，而且在Java语言中一个类也可以实现多个接口。对于调用<code>clone</code>方法，因为该方法语义的特殊性，所以要有JVM的直接支持，而<code>clone</code>方法就是这个调用接口，一旦有类调用这个方法，就可以实现拷贝功能了。</p> <h3 id="213-深拷贝的实现方式">2.1.3 深拷贝的实现方式</h3> <p>深拷贝的实现方式有很多种，大体上有这样几种：</p> <h4 id="1所有对象都实现深拷贝">1.所有对象都实现深拷贝</h4> <p>这种方式需要让类中所有引用对象都实现拷贝，从而实现类的深拷贝，代码如下：</p> <pre><code class="language-java">public class CloneExample {     public static void main(String[] args) throws CloneNotSupportedException {         // 创建被赋值对象         Address address = new Address(110, "北京");         People p1 = new People(1, "Java", address);         // 克隆 p1 对象         People p2 = p1.clone();         // 修改原型对象         p1.getAddress().setCity("西安");         // 输出 p1 和 p2 地址信息         System.out.println("p1:" + p1.getAddress().getCity() +                 " p2:" + p2.getAddress().getCity());     }     /**      * 用户类      */     static class People implements Cloneable {         private Integer id;         private String name;         private Address address;          public Integer getId() {             return id;         }          public void setId(Integer id) {             this.id = id;         }          public String getName() {             return name;         }          public void setName(String name) {             this.name = name;         }          public Address getAddress() {             return address;         }          public void setAddress(Address address) {             this.address = address;         }          public People(Integer id, String name, Address address) {             this.id = id;             this.name = name;             this.address = address;         }          /**          * 重写 clone 方法          * @throws CloneNotSupportedException          */         @Override         protected People clone() throws CloneNotSupportedException {             People people = (People) super.clone();             people.setAddress(this.address.clone()); // 引用类型克隆赋值             return people;         }     }     /**      * 地址类      */     static class Address implements Cloneable {         private Integer id;         private String city;          public Address(Integer id, String city) {             this.id = id;             this.city = city;         }          public Integer getId() {             return id;         }          public void setId(Integer id) {             this.id = id;         }          public String getCity() {             return city;         }          public void setCity(String city) {             this.city = city;         }          /**          * 重写 clone 方法          * @throws CloneNotSupportedException          */         @Override         protected Address clone() throws CloneNotSupportedException {             return (Address) super.clone();         }     } }</code></pre> <h4 id="2通过构造方法实现深拷贝">2.通过构造方法实现深拷贝</h4> <p>如果构造方法的参数为基本数据类型或者字符串类型，直接进行赋值即可，如果是对象类型，则需要重新 new 一个对象，实现代码如下：</p> <pre><code class="language-java">public class CloneExample2 {     public static void main(String[] args) {         Address address = new Address(100, "北京");         People people1 = new People(1, "ethan", address);         People people2 = new People(people1.getId(), people1.getName(), new Address(people1.getAddress().getId(), people1.getAddress().getCity()));              }      static class People {         private Integer id;         private String name;         private Address address;          public People(Integer id, String name, Address address) {             this.id = id;             this.name = name;             this.address = address;         }          public Integer getId() {             return id;         }          public void setId(Integer id) {             this.id = id;         }          public String getName() {             return name;         }          public void setName(String name) {             this.name = name;         }          public Address getAddress() {             return address;         }          public void setAddress(Address address) {             this.address = address;         }     }      static class Address {         private Integer id;         private String city;          public Address(Integer id, String city) {             this.id = id;             this.city = city;         }          public Integer getId() {             return id;         }          public void setId(Integer id) {             this.id = id;         }          public String getCity() {             return city;         }          public void setCity(String city) {             this.city = city;         }     } }</code></pre> <h4 id="3通过字节流实现深拷贝">3.通过字节流实现深拷贝</h4> <p>可以通过 JDK 自带的字节流实现深拷贝的方式，是先将要原型对象写入到内存中的字节流，然后再从这个字节流中读出刚刚存储的信息，来作为一个新的对象返回，那么这个克隆对象和原型对象就不存在任何地址上的共享，实现代码如下：</p> <pre><code class="language-java">public class CloneExample3 {     public static void main(String[] args) {         Address address = new Address(100, "北京");         People people1 = new People(1, "ethan", address);                  //字节流拷贝对象         People people2 = StreamClone.clone(people1);              }          static class StreamClone {         public static &lt;T extends Serializable&gt; T clone(People obj) {             T cloneObj = null;             try {                 //写入字节流                 ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();                 ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);                 objectOutputStream.writeObject(obj);                 objectOutputStream.close();                 //分配内存，写入原始对象并生成新对象                 ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArrayOutputStream.toByteArray());                 ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);                 //返回生成的新对象                 cloneObj = (T) objectInputStream.readObject();                 objectInputStream.close();             } catch (Exception e) {                 e.printStackTrace();             }             return cloneObj;         }     }     static class People implements Serializable {         private Integer id;         private String name;         private Address address;          public Integer getId() {             return id;         }          public void setId(Integer id) {             this.id = id;         }          public String getName() {             return name;         }          public void setName(String name) {             this.name = name;         }          public Address getAddress() {             return address;         }          public void setAddress(Address address) {             this.address = address;         }          public People(Integer id, String name, Address address) {             this.id = id;             this.name = name;             this.address = address;         }     }      static class Address implements Serializable {         private Integer id;         private String city;          public Integer getId() {             return id;         }          public void setId(Integer id) {             this.id = id;         }          public String getCity() {             return city;         }          public void setCity(String city) {             this.city = city;         }          public Address(Integer id, String city) {             this.id = id;             this.city = city;         }     } }</code></pre> <p>在利用字节流进行拷贝时，要注意每个对象必须实现<code>Serizlizable</code>接口，标识自己可以被序列化，否则就会抛出（<code>java.io.NotSerizlizableException</code>）异常。</p> <h4 id="4通过apache-commons-lang实现深拷贝">4.通过<code>Apache Commons Lang</code>实现深拷贝</h4> <p>相对于方法3，这个方法可以直接调用，实现代码如下：</p> <pre><code class="language-java">People people2 = (People)SerizlizationUtils.clone(people1); //其他部分和方法3相同，省略</code></pre> <h4 id="5通过json工具类实现深拷贝">5.通过<code>JSON</code>工具类实现深拷贝</h4> <pre><code class="language-java">Gson gson = new Gson(); People people2 = gson.fromJson(gson.toJson(people1), People.class);</code></pre> <p>在该方法中，不需要对<code>People</code>和<code>Address</code>类进行标识序列化。使用JSON 工具类会先把对象转化成字符串，然后再从字符串转化成新的对象，因此不会和原型对象有关联。从而实现了深拷贝，其他类似的 JSON 工具类的实现方式也是如此。</p> <h2 id="三总结">三、总结</h2> <p>原型模式在 Java 中主要有两种实现方式：深拷贝和浅拷贝，两者区别是深拷贝会复制引用对象，浅拷贝只会复制引用对象的地址。深拷贝相对于浅拷贝更加耗时和资源。</p> <p>为何有深拷贝的存在呢？因为对于可变对象来说，浅拷贝对于引用对象的地址拷贝会带来修改风险。所以在可变对象的场景下，尽量还是选择深拷贝的方式进行复制。</p> <h2 id="参考资料">参考资料</h2> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://time.geekbang.org/column/article/200786"  target="_blank" rel="nofollow">https://time.geekbang.org/column/article/200786</a></p> <p>《Java 重学设计模式》</p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://kaiwu.lagou.com/course/courseInfo.htm?courseId=59#/detail/pc?id=1767"  target="_blank" rel="nofollow">https://kaiwu.lagou.com/course/courseInfo.htm?courseId=59#/detail/pc?id=1767</a></p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://c.biancheng.net/view/1343.html"  target="_blank" rel="nofollow">http://c.biancheng.net/view/1343.html</a></p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-26530.htm">学美容美发的正规学校推荐上海（上海学美容美发到哪个学校好）</a></p>
                                        <p>下一个：<a href="/news/article-26994.htm">幼猫首次驱虫后多久打疫苗（幼猫首次驱虫后多久打疫苗啊）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2025-2-23-free-subscribe-node.htm" title="「2月23日」最高速度22.3M/S，2025年V2ray/SSR/Shadowrocket/Clash/HiddifyNext每天更新免费节点订阅链接">「2月23日」最高速度22.3M/S，2025年V2ray/SSR/Shadowrocket/Clash/HiddifyNext每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-26991.htm" title="设计模式学习笔记原型模式以及深浅拷贝的区别">设计模式学习笔记原型模式以及深浅拷贝的区别</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-29-clash-v2ray-ss-ssr.htm" title="「12月29日」最高速度18.9M/S，2024年Clash/V2ray/Shadowrocket/SSR/HiddifyNext每天更新免费节点订阅链接">「12月29日」最高速度18.9M/S，2024年Clash/V2ray/Shadowrocket/SSR/HiddifyNext每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-52443.htm" title="猫瘟***多少钱（猫瘟***需要多少钱）">猫瘟***多少钱（猫瘟***需要多少钱）</a></li>
                        <li class="py-2"><a href="/news/article-62018.htm" title="动物医院规模多大合适（动物医院挣钱吗）">动物医院规模多大合适（动物医院挣钱吗）</a></li>
                        <li class="py-2"><a href="/news/article-33601.htm" title="动物疫苗行业的毛利润率 动物疫苗行业的毛利润率是多少">动物疫苗行业的毛利润率 动物疫苗行业的毛利润率是多少</a></li>
                        <li class="py-2"><a href="/news/article-23267.htm" title="ElasticSearch（五） 整合Spring-data-elasticsearch">ElasticSearch（五） 整合Spring-data-elasticsearch</a></li>
                        <li class="py-2"><a href="/news/article-55158.htm" title="react实战系列起步（mockjs、第一个模块、docusaurus）">react实战系列起步（mockjs、第一个模块、docusaurus）</a></li>
                        <li class="py-2"><a href="/news/article-32166.htm" title="动物疫苗的正确使用方法图片大全集（动物疫苗的正确使用方法图片大全集视频）">动物疫苗的正确使用方法图片大全集（动物疫苗的正确使用方法图片大全集视频）</a></li>
                        <li class="py-2"><a href="/news/article-42389.htm" title="动物疫苗监管部门投诉电话是多少（动物疫苗监管部门投诉电话是多少号）">动物疫苗监管部门投诉电话是多少（动物疫苗监管部门投诉电话是多少号）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">87</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
    <!-- //about -->
        <!-- footer-top -->
    <div class="footer-top">
        <div class="container">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
            <p>
                HiddifyNextNode官网节点站 版权所有
                <br />
                Powered by WordPress
            </p>
        </div>
    </div>
    <!-- //footer-top -->
    <!-- for bootstrap working -->
    <script src="/assets/website/js/frontend/hiddify_next_node/bootstrap.js"></script>
    <!-- //for bootstrap working -->
    <!-- smooth scrolling -->
    <script type="text/javascript">
    $(document).ready(function() {
        /*
        	var defaults = {
        	containerID: 'toTop', // fading element id
        	containerHoverID: 'toTopHover', // fading element hover id
        	scrollSpeed: 1200,
        	easingType: 'linear' 
        	};
        */
        $().UItoTop({ easingType: 'easeOutQuart' });
    });
    </script>
    <a href="#" id="toTop" style="display: block;"> <span id="toTopHover" style="opacity: 1;"> </span></a>
    <!-- //smooth scrolling -->
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>